{
  "address": "0x849EFae5e727Dae4947c065B0851cc5838e941C3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usd",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "deposited",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usd",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recoverETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "remove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_safeToken",
          "type": "address"
        }
      ],
      "name": "setSafeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposited",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usd",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9ec38898b4e31fb7193e0fa2f235a224fe9b360810a0aab20906a129e1a9a6c6",
  "receipt": {
    "to": null,
    "from": "0xBD03D84be529D5b8862FD18ABFbA4d3b753d488A",
    "contractAddress": "0x849EFae5e727Dae4947c065B0851cc5838e941C3",
    "transactionIndex": 1,
    "gasUsed": "27136671",
    "logsBloom": "0x
    "blockHash": "0x713c71680355cd4eedc6f2ac9e2b25afa70a185acddce7f9741047ec55314ed4",
    "transactionHash": "0x9ec38898b4e31fb7193e0fa2f235a224fe9b360810a0aab20906a129e1a9a6c6",
    "logs": [],
    "blockNumber": 14875313,
    "cumulativeGasUsed": "27136671",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x179522635726710Dd7D2035a81d856de4Aa7836c"
  ],
  "numDeployments": 3,
  "solcInputHash": "320ae06f06358af3a71b955d71f6748b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usd\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usd\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_safeToken\",\"type\":\"address\"}],\"name\":\"setSafeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usd\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"crypt0grapher\",\"kind\":\"dev\",\"methods\":{\"deposit(uint256)\":{\"details\":\"Deposit stablecoin to the vault, the total supply of the vault includes not only tokens deposited by users, but also tokens transferred  to the vault\"},\"recoverERC20(address,uint256)\":{\"details\":\"this one is used to recover tokens sent to the vault by mistake, including both SAFE and USD ones\"},\"totalSupply()\":{\"details\":\"total supply, used to determine the price of the SAFE token, deposited on SAFE purchase + transferred to the vault\"}},\"title\":\"Safe Vault\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"safeToken()\":{\"notice\":\"only Safe Token can withdraw tokens from the vault, when users sell SAFE\"}},\"notice\":\"This contract is responsible for the stablecoin pool: mainly deposit/withdrawal and farms management\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SafeVault.sol\":\"SafeVault\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17;\\n\\n/// @title  Safe NFT\\n/// @author crypt0grapher\\n/// @notice Safe Yields NFT token based on ERC1155 standard, id [0..3] represents one of the 4 tiers\\n\\ncontract Owned {\\n    /// @dev this is getting the owner from the proxy contract, the proxy contract is ERC-173 compliant and support transferOwnership\\n    /// @dev service function used by children contracts which are at least SafeVault.sol and SafeToken.sol\\n    function _getOwner() internal view returns (address adminAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            adminAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5106b0f5d253c56993908f8f2bd501c5591bafa104c1d9114dc7426ad4685bb3\",\"license\":\"MIT\"},\"contracts/SafeVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\\\";\\nimport \\\"./interfaces/ISafeVault.sol\\\";\\nimport \\\"./Owned.sol\\\";\\n\\n/// @title  Safe Vault\\n/// @author crypt0grapher\\n/// @notice This contract is responsible for the stablecoin pool: mainly deposit/withdrawal and farms management\\ncontract SafeVault is ISafeVault, Proxied, Owned, ReentrancyGuard {\\n    IERC20 public usd;\\n    uint256 public totalDeposited;\\n    mapping(address => uint256) public deposited;\\n    /// @notice only Safe Token can withdraw tokens from the vault, when users sell SAFE\\n    address public safeToken;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == _getOwner(), \\\"SafeVault: only owner\\\");\\n        _;\\n    }\\n\\n    function initialize(address _usd) public proxied {\\n        usd = IERC20(_usd);\\n    }\\n\\n    constructor(address _usd) {\\n        initialize(_usd);\\n    }\\n\\n    function setSafeToken(address _safeToken) external onlyOwner {\\n        safeToken = _safeToken;\\n    }\\n\\n    /// @dev total supply, used to determine the price of the SAFE token, deposited on SAFE purchase + transferred to the vault\\n    function totalSupply() external view returns (uint256) {\\n        return usd.balanceOf(address(this));\\n    }\\n\\n    /// @dev Deposit stablecoin to the vault, the total supply of the vault includes not only tokens deposited by users, but also tokens transferred  to the vault\\n    function deposit(uint256 _amount) external nonReentrant {\\n        require(_amount > 0, \\\"SafeVault: amount to deposit must be greater than 0\\\");\\n        if (msg.sender != safeToken) {\\n            // used to count positions of external deposits, although Safe Token is in possession of all funds\\n            // to be able to withdraw from the vault with respect to the price of the SAFE token\\n            deposited[msg.sender] += _amount;\\n            totalDeposited += _amount;\\n        }\\n        usd.transferFrom(msg.sender, address(this), _amount);\\n        emit Deposit(msg.sender, _amount);\\n    }\\n\\n    function remove(address _receiver, uint256 _amount) external nonReentrant {\\n        /// @dev we're allowing withdrawals only to Safe Token, not any user, not even admin is allowed to withdraw from the vault.\\n        require(msg.sender == safeToken, \\\"SafeVault: only safe token is allowed to remove liquidity\\\");\\n        require(_amount > 0, \\\"SafeVault: amount to remove must be greater than 0\\\");\\n        require(usd.balanceOf(address(this)) >= _amount, \\\"SafeVault: vault balance is less than amount to withdraw\\\");\\n        usd.transfer(_receiver, _amount);\\n        emit Withdraw(msg.sender, _amount);\\n    }\\n\\n    /// @dev this one is used to recover tokens sent to the vault by mistake, including both SAFE and USD ones\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) public onlyOwner {\\n        IERC20(tokenAddress).transfer(_getOwner(), tokenAmount);\\n    }\\n\\n    function recoverETH() external onlyOwner {\\n        payable(_getOwner()).transfer(address(this).balance);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf61484d0894bf32333b6837401bde7da9abd7c60d19861b3bde863abf2e13b52\",\"license\":\"MIT\"},\"contracts/interfaces/ISafeVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17;\\n\\n/// @title  ISafeVault\\n/// @author crypt0grapher\\n/// @notice Safe Yield Vault depositing to the third-party yield farms\\ninterface ISafeVault {\\n    event Deposit(address indexed user, uint256 amount);\\n    event Withdraw(address indexed user, uint256 amount);\\n\\n    // @notice deposit stable coin  to the vault from the sender, anyone can deposit funds to the vault\\n    // @param _amount amount of stable coin  to deposit\\n    function deposit(uint256 _amount) external;\\n\\n    // @notice Withdraw stable coin from the vault, supported only for the SafeToken currently on selling SAFE Token\\n    // @dev that's called remove specifically to avoid confusion with withdraw since the vault is not a pool and can't be withdrawn from except the safe token\\n    // @param _user user to send tokens to, withdrawn from the sender\\n    // @param _amount amount of stable coin  to withdraw\\n    function remove(address _user, uint256 _amount) external;\\n\\n    // @notice totalSupply of the vault, total amount of the stablecoin in the vault, including deposits and other tokens transferred to the vault\\n    // @return total supply of the vault\\n    function totalSupply() external view returns (uint256);\\n\\n    // @notice total deposited of the vault from non-Safe Token \\\"external\\\" users\\n    // @return total stable coin deposited to the vault\\n    function totalDeposited() external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0xbde34be77630ac437cfcdc8e7f010705d513712bd113af961c1129ffc97e559c\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaceeafeeaf0d200ca3942d8bf14c1c4f787a77f79cc87c08bb668e65acdee29\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610b89380380610b8983398101604081905261002f916100c0565b600160005561003d81610043565b506100f0565b600061005b600080516020610b698339815191525490565b90506001600160a01b038116610088576001600160a01b03600080516020610b698339815191525561009d565b336001600160a01b0382161461009d57600080fd5b50600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000602082840312156100d257600080fd5b81516001600160a01b03811681146100e957600080fd5b9392505050565b610a6a806100ff6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063abe7f1ab11610071578063abe7f1ab14610124578063b6b55f2514610137578063c4d66de81461014a578063cb13cddb1461015d578063d63a6ccd1461017d578063ff50abdc1461019057600080fd5b80630614117a146100ae57806318160ddd146100b8578063393eec7b146100d35780634b3fd05a146100e65780638980f11f14610111575b600080fd5b6100b6610199565b005b6100c061024f565b6040519081526020015b60405180910390f35b6100b66100e136600461094d565b6102c1565b6004546100f9906001600160a01b031681565b6040516001600160a01b0390911681526020016100ca565b6100b661011f36600461096f565b61034b565b6100b661013236600461096f565b61044e565b6100b6610145366004610999565b6106dc565b6100b661015836600461094d565b61085b565b6100c061016b36600461094d565b60036020526000908152604090205481565b6001546100f9906001600160a01b031681565b6100c060025481565b600080516020610a15833981519152546001600160a01b0316336001600160a01b0316146102065760405162461bcd60e51b815260206004820152601560248201527429b0b332ab30bab63a1d1037b7363c9037bbb732b960591b60448201526064015b60405180910390fd5b600080516020610a15833981519152546040516001600160a01b03909116904780156108fc02916000818181858888f1935050505015801561024c573d6000803e3d6000fd5b50565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610298573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102bc91906109b2565b905090565b600080516020610a15833981519152546001600160a01b0316336001600160a01b0316146103295760405162461bcd60e51b815260206004820152601560248201527429b0b332ab30bab63a1d1037b7363c9037bbb732b960591b60448201526064016101fd565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b600080516020610a15833981519152546001600160a01b0316336001600160a01b0316146103b35760405162461bcd60e51b815260206004820152601560248201527429b0b332ab30bab63a1d1037b7363c9037bbb732b960591b60448201526064016101fd565b816001600160a01b031663a9059cbb6103d8600080516020610a158339815191525490565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af1158015610425573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044991906109cb565b505050565b6104566108d8565b6004546001600160a01b031633146104d65760405162461bcd60e51b815260206004820152603960248201527f536166655661756c743a206f6e6c79207361666520746f6b656e20697320616c60448201527f6c6f77656420746f2072656d6f7665206c69717569646974790000000000000060648201526084016101fd565b600081116105415760405162461bcd60e51b815260206004820152603260248201527f536166655661756c743a20616d6f756e7420746f2072656d6f7665206d75737460448201527102062652067726561746572207468616e20360741b60648201526084016101fd565b6001546040516370a0823160e01b815230600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa158015610589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ad91906109b2565b10156106215760405162461bcd60e51b815260206004820152603860248201527f536166655661756c743a207661756c742062616c616e6365206973206c65737360448201527f207468616e20616d6f756e7420746f207769746864726177000000000000000060648201526084016101fd565b60015460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af1158015610674573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069891906109cb565b5060405181815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a26106d86001600055565b5050565b6106e46108d8565b600081116107505760405162461bcd60e51b815260206004820152603360248201527f536166655661756c743a20616d6f756e7420746f206465706f736974206d75736044820152720742062652067726561746572207468616e203606c1b60648201526084016101fd565b6004546001600160a01b031633146107a05733600090815260036020526040812080548392906107819084906109ed565b92505081905550806002600082825461079a91906109ed565b90915550505b6001546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156107f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081b91906109cb565b5060405181815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a261024c6001600055565b6000610873600080516020610a158339815191525490565b90506001600160a01b0381166108a0576001600160a01b03600080516020610a15833981519152556108b5565b336001600160a01b038216146108b557600080fd5b50600180546001600160a01b0319166001600160a01b0392909216919091179055565b60026000540361092a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016101fd565b6002600055565b80356001600160a01b038116811461094857600080fd5b919050565b60006020828403121561095f57600080fd5b61096882610931565b9392505050565b6000806040838503121561098257600080fd5b61098b83610931565b946020939093013593505050565b6000602082840312156109ab57600080fd5b5035919050565b6000602082840312156109c457600080fd5b5051919050565b6000602082840312156109dd57600080fd5b8151801515811461096857600080fd5b80820180821115610a0e57634e487b7160e01b600052601160045260246000fd5b9291505056feb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103a264697066735822122063f6d164d1ea794fe21a375a8acd4091bee3661586fc562f4173c27003b60d2464736f6c63430008110033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063abe7f1ab11610071578063abe7f1ab14610124578063b6b55f2514610137578063c4d66de81461014a578063cb13cddb1461015d578063d63a6ccd1461017d578063ff50abdc1461019057600080fd5b80630614117a146100ae57806318160ddd146100b8578063393eec7b146100d35780634b3fd05a146100e65780638980f11f14610111575b600080fd5b6100b6610199565b005b6100c061024f565b6040519081526020015b60405180910390f35b6100b66100e136600461094d565b6102c1565b6004546100f9906001600160a01b031681565b6040516001600160a01b0390911681526020016100ca565b6100b661011f36600461096f565b61034b565b6100b661013236600461096f565b61044e565b6100b6610145366004610999565b6106dc565b6100b661015836600461094d565b61085b565b6100c061016b36600461094d565b60036020526000908152604090205481565b6001546100f9906001600160a01b031681565b6100c060025481565b600080516020610a15833981519152546001600160a01b0316336001600160a01b0316146102065760405162461bcd60e51b815260206004820152601560248201527429b0b332ab30bab63a1d1037b7363c9037bbb732b960591b60448201526064015b60405180910390fd5b600080516020610a15833981519152546040516001600160a01b03909116904780156108fc02916000818181858888f1935050505015801561024c573d6000803e3d6000fd5b50565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610298573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102bc91906109b2565b905090565b600080516020610a15833981519152546001600160a01b0316336001600160a01b0316146103295760405162461bcd60e51b815260206004820152601560248201527429b0b332ab30bab63a1d1037b7363c9037bbb732b960591b60448201526064016101fd565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b600080516020610a15833981519152546001600160a01b0316336001600160a01b0316146103b35760405162461bcd60e51b815260206004820152601560248201527429b0b332ab30bab63a1d1037b7363c9037bbb732b960591b60448201526064016101fd565b816001600160a01b031663a9059cbb6103d8600080516020610a158339815191525490565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af1158015610425573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044991906109cb565b505050565b6104566108d8565b6004546001600160a01b031633146104d65760405162461bcd60e51b815260206004820152603960248201527f536166655661756c743a206f6e6c79207361666520746f6b656e20697320616c60448201527f6c6f77656420746f2072656d6f7665206c69717569646974790000000000000060648201526084016101fd565b600081116105415760405162461bcd60e51b815260206004820152603260248201527f536166655661756c743a20616d6f756e7420746f2072656d6f7665206d75737460448201527102062652067726561746572207468616e20360741b60648201526084016101fd565b6001546040516370a0823160e01b815230600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa158015610589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ad91906109b2565b10156106215760405162461bcd60e51b815260206004820152603860248201527f536166655661756c743a207661756c742062616c616e6365206973206c65737360448201527f207468616e20616d6f756e7420746f207769746864726177000000000000000060648201526084016101fd565b60015460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af1158015610674573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069891906109cb565b5060405181815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a26106d86001600055565b5050565b6106e46108d8565b600081116107505760405162461bcd60e51b815260206004820152603360248201527f536166655661756c743a20616d6f756e7420746f206465706f736974206d75736044820152720742062652067726561746572207468616e203606c1b60648201526084016101fd565b6004546001600160a01b031633146107a05733600090815260036020526040812080548392906107819084906109ed565b92505081905550806002600082825461079a91906109ed565b90915550505b6001546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156107f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081b91906109cb565b5060405181815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a261024c6001600055565b6000610873600080516020610a158339815191525490565b90506001600160a01b0381166108a0576001600160a01b03600080516020610a15833981519152556108b5565b336001600160a01b038216146108b557600080fd5b50600180546001600160a01b0319166001600160a01b0392909216919091179055565b60026000540361092a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016101fd565b6002600055565b80356001600160a01b038116811461094857600080fd5b919050565b60006020828403121561095f57600080fd5b61096882610931565b9392505050565b6000806040838503121561098257600080fd5b61098b83610931565b946020939093013593505050565b6000602082840312156109ab57600080fd5b5035919050565b6000602082840312156109c457600080fd5b5051919050565b6000602082840312156109dd57600080fd5b8151801515811461096857600080fd5b80820180821115610a0e57634e487b7160e01b600052601160045260246000fd5b9291505056feb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103a264697066735822122063f6d164d1ea794fe21a375a8acd4091bee3661586fc562f4173c27003b60d2464736f6c63430008110033",
  "devdoc": {
    "author": "crypt0grapher",
    "kind": "dev",
    "methods": {
      "deposit(uint256)": {
        "details": "Deposit stablecoin to the vault, the total supply of the vault includes not only tokens deposited by users, but also tokens transferred  to the vault"
      },
      "recoverERC20(address,uint256)": {
        "details": "this one is used to recover tokens sent to the vault by mistake, including both SAFE and USD ones"
      },
      "totalSupply()": {
        "details": "total supply, used to determine the price of the SAFE token, deposited on SAFE purchase + transferred to the vault"
      }
    },
    "title": "Safe Vault",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "safeToken()": {
        "notice": "only Safe Token can withdraw tokens from the vault, when users sell SAFE"
      }
    },
    "notice": "This contract is responsible for the stablecoin pool: mainly deposit/withdrawal and farms management",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/SafeVault.sol:SafeVault",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 162,
        "contract": "contracts/SafeVault.sol:SafeVault",
        "label": "usd",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)131"
      },
      {
        "astId": 164,
        "contract": "contracts/SafeVault.sol:SafeVault",
        "label": "totalDeposited",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 168,
        "contract": "contracts/SafeVault.sol:SafeVault",
        "label": "deposited",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 171,
        "contract": "contracts/SafeVault.sol:SafeVault",
        "label": "safeToken",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)131": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}